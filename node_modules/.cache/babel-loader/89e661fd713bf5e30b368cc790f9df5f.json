{"ast":null,"code":"import _slicedToArray from\"/Users/divyanshisaxena/Desktop/divyanshi/learning/gql/group-chat-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Users/divyanshisaxena/Desktop/divyanshi/learning/gql/group-chat-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React,{createContext,useContext,useReducer}from'react';import jwtDecode from'jwt-decode';import{jsx as _jsx}from\"react/jsx-runtime\";var AuthStateContext=/*#__PURE__*/createContext();var AuthDispatchContext=/*#__PURE__*/createContext();var user=null;var token=localStorage.getItem('token');if(token){var decodedToken=jwtDecode(token);// since we have expiry value 'exp' in the token payload, we need to check is login is expired\nvar expiresAt=new Date(decodedToken.exp*1000);console.log('expiry ',expiresAt);if(new Date()>expiresAt){localStorage.removeItem('token');}else{user=decodedToken;}}else{console.log('no token found');}var authReducer=function authReducer(state,action){switch(action.type){case'LOGIN':localStorage.setItem('token',action.payload.token);return _objectSpread(_objectSpread({},state),{},{user:action.payload});case'LOGOUT':localStorage.removeItem('token');return _objectSpread(_objectSpread({},state),{},{user:null});default:throw new Error(\"Unknown action type: \".concat(action.type));}};export var AuthProvider=function AuthProvider(_ref){var children=_ref.children;var _useReducer=useReducer(authReducer,{user:user}),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];return/*#__PURE__*/_jsx(AuthDispatchContext.Provider,{value:dispatch,children:/*#__PURE__*/_jsx(AuthStateContext.Provider,{value:state,children:children})});};export var useAuthState=function useAuthState(){return useContext(AuthStateContext);};export var useAuthDispatch=function useAuthDispatch(){return useContext(AuthDispatchContext);};","map":{"version":3,"sources":["/Users/divyanshisaxena/Desktop/divyanshi/learning/gql/group-chat-app/client/src/context/auth.js"],"names":["React","createContext","useContext","useReducer","jwtDecode","AuthStateContext","AuthDispatchContext","user","token","localStorage","getItem","decodedToken","expiresAt","Date","exp","console","log","removeItem","authReducer","state","action","type","setItem","payload","Error","AuthProvider","children","dispatch","useAuthState","useAuthDispatch"],"mappings":"mYAAA,MAAOA,CAAAA,KAAP,EAAgBC,aAAhB,CAA+BC,UAA/B,CAA2CC,UAA3C,KAA6D,OAA7D,CACA,MAAOC,CAAAA,SAAP,KAAsB,YAAtB,C,2CAEA,GAAMC,CAAAA,gBAAgB,cAAGJ,aAAa,EAAtC,CACA,GAAMK,CAAAA,mBAAmB,cAAGL,aAAa,EAAzC,CAEA,GAAIM,CAAAA,IAAI,CAAG,IAAX,CACA,GAAMC,CAAAA,KAAK,CAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd,CACA,GAAIF,KAAJ,CAAW,CACT,GAAMG,CAAAA,YAAY,CAAGP,SAAS,CAACI,KAAD,CAA9B,CACA;AACA,GAAMI,CAAAA,SAAS,CAAG,GAAIC,CAAAA,IAAJ,CAASF,YAAY,CAACG,GAAb,CAAmB,IAA5B,CAAlB,CACAC,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAuBJ,SAAvB,EACA,GAAI,GAAIC,CAAAA,IAAJ,GAAaD,SAAjB,CAA4B,CAC1BH,YAAY,CAACQ,UAAb,CAAwB,OAAxB,EACD,CAFD,IAGK,CACHV,IAAI,CAAGI,YAAP,CACD,CACF,CAXD,IAYK,CACHI,OAAO,CAACC,GAAR,CAAY,gBAAZ,EACD,CAED,GAAME,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAQC,MAAR,CAAmB,CACrC,OAAQA,MAAM,CAACC,IAAf,EACE,IAAK,OAAL,CACEZ,YAAY,CAACa,OAAb,CAAqB,OAArB,CAA8BF,MAAM,CAACG,OAAP,CAAef,KAA7C,EACA,sCACKW,KADL,MAEEZ,IAAI,CAAEa,MAAM,CAACG,OAFf,GAIF,IAAK,QAAL,CACEd,YAAY,CAACQ,UAAb,CAAwB,OAAxB,EACA,sCACKE,KADL,MAEEZ,IAAI,CAAE,IAFR,GAIF,QACE,KAAM,IAAIiB,CAAAA,KAAJ,gCAAkCJ,MAAM,CAACC,IAAzC,EAAN,CAdJ,CAgBD,CAjBD,CAmBA,MAAO,IAAMI,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,CAC5C,gBAA0BvB,UAAU,CAACe,WAAD,CAAc,CAAEX,IAAI,CAAJA,IAAF,CAAd,CAApC,4CAAOY,KAAP,iBAAcQ,QAAd,iBACA,mBACE,KAAC,mBAAD,CAAqB,QAArB,EAA8B,KAAK,CAAEA,QAArC,uBACE,KAAC,gBAAD,CAAkB,QAAlB,EAA2B,KAAK,CAAER,KAAlC,UACGO,QADH,EADF,EADF,CAOD,CATM,CAWP,MAAO,IAAME,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,SAAM1B,CAAAA,UAAU,CAACG,gBAAD,CAAhB,EAArB,CACP,MAAO,IAAMwB,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,SAAM3B,CAAAA,UAAU,CAACI,mBAAD,CAAhB,EAAxB","sourcesContent":["import React, { createContext, useContext, useReducer } from 'react'\nimport jwtDecode from 'jwt-decode'\n\nconst AuthStateContext = createContext()\nconst AuthDispatchContext = createContext()\n\nlet user = null\nconst token = localStorage.getItem('token')\nif (token) {\n  const decodedToken = jwtDecode(token)\n  // since we have expiry value 'exp' in the token payload, we need to check is login is expired\n  const expiresAt = new Date(decodedToken.exp * 1000) \n  console.log('expiry ', expiresAt)\n  if (new Date() > expiresAt) {\n    localStorage.removeItem('token')\n  }\n  else {\n    user = decodedToken\n  }\n}\nelse {\n  console.log('no token found')\n}\n\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOGIN':\n      localStorage.setItem('token', action.payload.token)\n      return {\n        ...state,\n        user: action.payload\n      }\n    case 'LOGOUT':\n      localStorage.removeItem('token')\n      return {\n        ...state,\n        user: null\n      }\n    default:\n      throw new Error(`Unknown action type: ${action.type}`)\n  }\n}\n\nexport const AuthProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, { user })\n  return (\n    <AuthDispatchContext.Provider value={dispatch}>\n      <AuthStateContext.Provider value={state}>\n        {children}\n      </AuthStateContext.Provider>\n    </AuthDispatchContext.Provider>\n  )\n}\n\nexport const useAuthState = () => useContext(AuthStateContext)\nexport const useAuthDispatch = () => useContext(AuthDispatchContext)"]},"metadata":{},"sourceType":"module"}