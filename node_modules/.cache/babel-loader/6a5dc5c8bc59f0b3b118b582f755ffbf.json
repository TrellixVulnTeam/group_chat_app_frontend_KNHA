{"ast":null,"code":"var _jsxFileName = \"/Users/divyanshisaxena/Desktop/divyanshi/learning/gql/group-chat-app/client/src/pages/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect } from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport { useAuthDispatch, useAuthState } from '../context/auth';\nimport { useMessageState, useMessageDispatch } from '../context/message';\nimport { Row, Col, Button, Card } from 'react-bootstrap';\nimport classNames from 'classnames';\nimport moment from 'moment';\nimport { Chatroom } from './Chatroom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_GROUPS = gql`\n  query getGroups{\n    getGroups{\n      groupname groupdesc createdAt\n    }\n  }\n`;\nexport const Home = () => {\n  _s();\n\n  var _groups$find;\n\n  const authDispatch = useAuthDispatch();\n  const {\n    user\n  } = useAuthState();\n  const dispatch = useMessageDispatch();\n  const {\n    groups\n  } = useMessageState();\n  const selectedGroup = groups === null || groups === void 0 ? void 0 : (_groups$find = groups.find(group => group.selected === true)) === null || _groups$find === void 0 ? void 0 : _groups$find.groupname; // const [groups, setGroups] = useState([])\n  // const [getGroups, { loading, data, error }] = useLazyQuery(GET_GROUPS)\n\n  const {\n    loading\n  } = useQuery(GET_GROUPS, {\n    onCompleted: data => dispatch({\n      type: 'SET_GROUPS',\n      payload: data.getGroups\n    }),\n    onError: err => console.log('error in query: ', err)\n  });\n  let groupsMarkup;\n\n  if (!groups || loading) {\n    groupsMarkup = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"loading..\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 20\n    }, this);\n  } else if (groups.length === 0) {\n    groupsMarkup = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"no groups created yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 20\n    }, this);\n  } else if (groups.length > 0) {\n    groupsMarkup = groups.map(group => {\n      const selected = selectedGroup === group.groupname;\n      return /*#__PURE__*/_jsxDEV(Col, {\n        sm: 12,\n        md: 6,\n        lg: 4,\n        className: \"my-2 mx-auto\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          className: \"text-center pt-1\",\n          children: [/*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n              className: \"text-uppercase\",\n              children: group.groupname\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              className: \"text-capitalize\",\n              children: group.groupdesc\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"primary\",\n              className: classNames(\"mb-3\", {\n                'btn-warning': selected\n              }),\n              onClick: () => {\n                dispatch({\n                  type: 'SET_SELECTED_GROUP',\n                  payload: group.groupname\n                });\n              },\n              children: \"Enter group\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n            className: \"text-muted\",\n            children: [\"Created: \", moment(group.createdAt).format('MMM DD, YYYY @ h:mm a')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 11\n          }, this)]\n        }, group.groupname, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this);\n    });\n  }\n\n  const logout = () => {\n    authDispatch({\n      type: 'LOGOUT'\n    });\n    window.location.href = '/login';\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-end mx-auto mb-3\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        className: \"text-end\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"link\",\n          className: \"btn-light text-decoration-none\",\n          onClick: logout,\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: groupsMarkup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Chatroom, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"7wgWitVFcR80kmjf/QSvxytQQoI=\", false, function () {\n  return [useAuthDispatch, useAuthState, useMessageDispatch, useMessageState, useQuery];\n});\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/divyanshisaxena/Desktop/divyanshi/learning/gql/group-chat-app/client/src/pages/Home.js"],"names":["React","Fragment","useState","useEffect","gql","useQuery","useAuthDispatch","useAuthState","useMessageState","useMessageDispatch","Row","Col","Button","Card","classNames","moment","Chatroom","GET_GROUPS","Home","authDispatch","user","dispatch","groups","selectedGroup","find","group","selected","groupname","loading","onCompleted","data","type","payload","getGroups","onError","err","console","log","groupsMarkup","length","map","groupdesc","createdAt","format","logout","window","location","href"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,SAApC,QAAqD,OAArD;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AACA,SAASC,eAAT,EAA0BC,YAA1B,QAA8C,iBAA9C;AACA,SAASC,eAAT,EAA0BC,kBAA1B,QAAoD,oBAApD;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,MAAnB,EAA2BC,IAA3B,QAAuC,iBAAvC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,QAAT,QAAyB,YAAzB;;AAEA,MAAMC,UAAU,GAAGb,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA,CANA;AAOA,OAAO,MAAMc,IAAI,GAAG,MAAM;AAAA;;AAAA;;AACxB,QAAMC,YAAY,GAAGb,eAAe,EAApC;AACA,QAAM;AAAEc,IAAAA;AAAF,MAAWb,YAAY,EAA7B;AACA,QAAMc,QAAQ,GAAGZ,kBAAkB,EAAnC;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAad,eAAe,EAAlC;AACA,QAAMe,aAAa,GAAGD,MAAH,aAAGA,MAAH,uCAAGA,MAAM,CAAEE,IAAR,CAAaC,KAAK,IAAIA,KAAK,CAACC,QAAN,KAAmB,IAAzC,CAAH,iDAAG,aAAgDC,SAAtE,CALwB,CAOxB;AAEA;;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcvB,QAAQ,CAACY,UAAD,EAAa;AACvCY,IAAAA,WAAW,EAAGC,IAAD,IAAUT,QAAQ,CAAC;AAAEU,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,OAAO,EAAEF,IAAI,CAACG;AAApC,KAAD,CADQ;AAEvCC,IAAAA,OAAO,EAAGC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,GAAhC;AAFqB,GAAb,CAA5B;AAKA,MAAIG,YAAJ;;AACA,MAAI,CAAChB,MAAD,IAAWM,OAAf,EAAwB;AACtBU,IAAAA,YAAY,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAf;AACD,GAFD,MAEO,IAAIhB,MAAM,CAACiB,MAAP,KAAkB,CAAtB,EAAyB;AAC9BD,IAAAA,YAAY,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAf;AACD,GAFM,MAEA,IAAIhB,MAAM,CAACiB,MAAP,GAAgB,CAApB,EAAuB;AAC5BD,IAAAA,YAAY,GAAGhB,MAAM,CAACkB,GAAP,CAAWf,KAAK,IAAI;AACjC,YAAMC,QAAQ,GAAGH,aAAa,KAAKE,KAAK,CAACE,SAAzC;AACA,0BACE,QAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAa,QAAA,EAAE,EAAE,CAAjB;AAAoB,QAAA,EAAE,EAAE,CAAxB;AAA2B,QAAA,SAAS,EAAC,cAArC;AAAA,+BACA,QAAC,IAAD;AAAM,UAAA,SAAS,EAAC,kBAAhB;AAAA,kCAEE,QAAC,IAAD,CAAM,IAAN;AAAA,oCACE,QAAC,IAAD,CAAM,KAAN;AAAY,cAAA,SAAS,EAAC,gBAAtB;AAAA,wBACGF,KAAK,CAACE;AADT;AAAA;AAAA;AAAA;AAAA,oBADF,eAKE,QAAC,IAAD,CAAM,IAAN;AAAW,cAAA,SAAS,EAAC,iBAArB;AAAA,wBACGF,KAAK,CAACgB;AADT;AAAA;AAAA;AAAA;AAAA,oBALF,eASE,QAAC,MAAD;AAAQ,cAAA,OAAO,EAAC,SAAhB;AACE,cAAA,SAAS,EAAE3B,UAAU,CAAC,MAAD,EAAQ;AAAE,+BAAeY;AAAjB,eAAR,CADvB;AAEI,cAAA,OAAO,EAAE,MAAM;AACbL,gBAAAA,QAAQ,CAAC;AAAEU,kBAAAA,IAAI,EAAE,oBAAR;AAA8BC,kBAAAA,OAAO,EAAEP,KAAK,CAACE;AAA7C,iBAAD,CAAR;AAEC,eALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBATF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAqBE,QAAC,IAAD,CAAM,MAAN;AAAa,YAAA,SAAS,EAAC,YAAvB;AAAA,oCACYZ,MAAM,CAACU,KAAK,CAACiB,SAAP,CAAN,CAAwBC,MAAxB,CAA+B,uBAA/B,CADZ;AAAA;AAAA;AAAA;AAAA;AAAA,kBArBF;AAAA,WAAwClB,KAAK,CAACE,SAA9C;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cADF;AA6BD,KA/Bc,CAAf;AAgCD;;AAED,QAAMiB,MAAM,GAAG,MAAM;AACnBzB,IAAAA,YAAY,CAAC;AAAEY,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAZ;AACAc,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB;AACD,GAHD;;AAKA,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,GAAD;AAAK,MAAA,SAAS,EAAC,kCAAf;AAAA,6BACE,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,MAAhB;AAAuB,UAAA,SAAS,EAAC,gCAAjC;AACE,UAAA,OAAO,EAAEH,MADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAQE,QAAC,GAAD;AAAA,gBAGKN;AAHL;AAAA;AAAA;AAAA;AAAA,YARF,eAgBE,QAAC,GAAD;AAAA,6BACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CAlFM;;GAAMpB,I;UACUZ,e,EACJC,Y,EACAE,kB,EACED,e,EAMCH,Q;;;KAVTa,I","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react'\nimport { gql, useQuery } from '@apollo/client'\nimport { useAuthDispatch, useAuthState } from '../context/auth'\nimport { useMessageState, useMessageDispatch } from '../context/message'\nimport { Row, Col, Button, Card } from 'react-bootstrap'\nimport classNames from 'classnames'\nimport moment from 'moment'\nimport { Chatroom } from './Chatroom'\n\nconst GET_GROUPS = gql`\n  query getGroups{\n    getGroups{\n      groupname groupdesc createdAt\n    }\n  }\n`\nexport const Home = () => {\n  const authDispatch = useAuthDispatch()\n  const { user } = useAuthState()\n  const dispatch = useMessageDispatch()\n  const { groups } = useMessageState()\n  const selectedGroup = groups?.find(group => group.selected === true)?.groupname\n\n  // const [groups, setGroups] = useState([])\n\n  // const [getGroups, { loading, data, error }] = useLazyQuery(GET_GROUPS)\n  const { loading } = useQuery(GET_GROUPS, {\n    onCompleted: (data) => dispatch({ type: 'SET_GROUPS', payload: data.getGroups }),\n    onError: (err) => console.log('error in query: ', err)\n  })\n\n  let groupsMarkup\n  if (!groups || loading) {\n    groupsMarkup = <p>loading..</p>\n  } else if (groups.length === 0) {\n    groupsMarkup = <p>no groups created yet</p>\n  } else if (groups.length > 0) {\n    groupsMarkup = groups.map(group => {\n      const selected = selectedGroup === group.groupname\n      return (\n        <Col sm={12} md={6} lg={4} className=\"my-2 mx-auto\">\n        <Card className=\"text-center pt-1\" key={group.groupname}>\n          {/* <Card.Header>Featured</Card.Header> */}\n          <Card.Body>\n            <Card.Title className=\"text-uppercase\">\n              {group.groupname}\n              {/* title */}\n            </Card.Title>\n            <Card.Text className=\"text-capitalize\">\n              {group.groupdesc}\n              {/* text */}\n            </Card.Text>\n            <Button variant=\"primary\"\n              className={classNames(\"mb-3\",{ 'btn-warning': selected })}\n                onClick={() => {\n                  dispatch({ type: 'SET_SELECTED_GROUP', payload: group.groupname })\n                                   \n                  }\n                }>\n                Enter group\n              </Button>\n          </Card.Body>\n          <Card.Footer className=\"text-muted\">\n            Created: {moment(group.createdAt).format('MMM DD, YYYY @ h:mm a')}\n            {/* footer */}\n          </Card.Footer>\n        </Card></Col>\n      )\n    })\n  }\n\n  const logout = () => {\n    authDispatch({ type: 'LOGOUT' })\n    window.location.href = '/login'\n  }\n\n  return (\n    <Fragment>\n      <Row className=\"justify-content-end mx-auto mb-3\">\n        <Col className=\"text-end\">\n          <Button variant=\"link\" className=\"btn-light text-decoration-none\"\n            onClick={logout}>Logout</Button>\n        </Col>\n      </Row>\n\n      <Row>\n        {/* {groups.map(group => { */}\n        {/* <Col> */}\n          {groupsMarkup}  \n        {/* </Col> */}\n        {/* })} */}\n      </Row>\n\n      <Row>\n        <Chatroom />\n      </Row>\n    </Fragment>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}