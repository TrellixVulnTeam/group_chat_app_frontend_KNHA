{"ast":null,"code":"import _objectSpread from\"/Users/divyanshisaxena/Desktop/divyanshi/learning/gql/group-chat-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{ApolloClient,InMemoryCache,ApolloProvider as Provider,createHttpLink,split}from\"@apollo/client\";import{setContext}from'@apollo/client/link/context';import{WebSocketLink}from'@apollo/client/link/ws';import{getMainDefinition}from'@apollo/client/utilities';import{jsx as _jsx}from\"react/jsx-runtime\";var httpLink=createHttpLink({uri:'https://group-chat-app-div.herokuapp.com/graphql'});// the setContext will set the header for all request\n// if token changes, it sets new token\nvar authLink=setContext(function(_,_ref){var headers=_ref.headers;// get the authentication token from local storage if it exists\nvar token=localStorage.getItem('token');// return the headers to the context so httpLink can read them\nreturn{headers:_objectSpread(_objectSpread({},headers),{},{authorization:token?\"Bearer \".concat(token):\"\"})};});httpLink=authLink.concat(httpLink);var wsLink=new WebSocketLink({uri:'wss://group-chat-app-div.herokuapp.com/subscriptions',options:{reconnect:true,connectionParams:{Authorization:\"Bearer \".concat(localStorage.getItem('token'))}}});var splitLink=split(function(_ref2){var query=_ref2.query;var definition=getMainDefinition(query);return definition.kind==='OperationDefinition'&&definition.operation==='subscription';},wsLink,httpLink);var client=new ApolloClient({link:splitLink,cache:new InMemoryCache(),onError:function onError(_ref3){var networkError=_ref3.networkError,graphQLErrors=_ref3.graphQLErrors;console.log('graphQLErrors',graphQLErrors);console.log('networkError',networkError);}});export default function ApolloProvider(props){return/*#__PURE__*/_jsx(Provider,_objectSpread({client:client},props));}","map":{"version":3,"sources":["/Users/divyanshisaxena/Desktop/divyanshi/learning/gql/group-chat-app/client/src/ApolloProvider.js"],"names":["ApolloClient","InMemoryCache","ApolloProvider","Provider","createHttpLink","split","setContext","WebSocketLink","getMainDefinition","httpLink","uri","authLink","_","headers","token","localStorage","getItem","authorization","concat","wsLink","options","reconnect","connectionParams","Authorization","splitLink","query","definition","kind","operation","client","link","cache","onError","networkError","graphQLErrors","console","log","props"],"mappings":"iMAAA,OACEA,YADF,CAEEC,aAFF,CAGEC,cAAc,GAAIC,CAAAA,QAHpB,CAIEC,cAJF,CAKEC,KALF,KAMO,gBANP,CAQA,OAASC,UAAT,KAA2B,6BAA3B,CACA,OAASC,aAAT,KAA8B,wBAA9B,CACA,OAASC,iBAAT,KAAkC,0BAAlC,C,2CAEA,GAAIC,CAAAA,QAAQ,CAAGL,cAAc,CAAC,CAC5BM,GAAG,CAAE,kDADuB,CAAD,CAA7B,CAIA;AACA;AACA,GAAMC,CAAAA,QAAQ,CAAGL,UAAU,CAAC,SAACM,CAAD,MAAoB,IAAdC,CAAAA,OAAc,MAAdA,OAAc,CAC9C;AACA,GAAMC,CAAAA,KAAK,CAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd,CACA;AACA,MAAO,CACLH,OAAO,gCACFA,OADE,MAELI,aAAa,CAAEH,KAAK,kBAAaA,KAAb,EAAuB,EAFtC,EADF,CAAP,CAMD,CAV0B,CAA3B,CAYAL,QAAQ,CAAGE,QAAQ,CAACO,MAAT,CAAgBT,QAAhB,CAAX,CAEA,GAAMU,CAAAA,MAAM,CAAG,GAAIZ,CAAAA,aAAJ,CAAkB,CAC/BG,GAAG,CAAE,sDAD0B,CAE/BU,OAAO,CAAE,CACPC,SAAS,CAAE,IADJ,CAEPC,gBAAgB,CAAE,CAChBC,aAAa,kBAAYR,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ,CADG,CAFX,CAFsB,CAAlB,CAAf,CAUA,GAAMQ,CAAAA,SAAS,CAAGnB,KAAK,CACrB,eAAe,IAAZoB,CAAAA,KAAY,OAAZA,KAAY,CACb,GAAMC,CAAAA,UAAU,CAAGlB,iBAAiB,CAACiB,KAAD,CAApC,CACA,MACEC,CAAAA,UAAU,CAACC,IAAX,GAAoB,qBAApB,EACAD,UAAU,CAACE,SAAX,GAAyB,cAF3B,CAID,CAPoB,CAQrBT,MARqB,CASrBV,QATqB,CAAvB,CAYA,GAAMoB,CAAAA,MAAM,CAAG,GAAI7B,CAAAA,YAAJ,CAAiB,CAC9B8B,IAAI,CAAEN,SADwB,CAE9BO,KAAK,CAAE,GAAI9B,CAAAA,aAAJ,EAFuB,CAG9B+B,OAAO,CAAE,uBAAqC,IAAlCC,CAAAA,YAAkC,OAAlCA,YAAkC,CAApBC,aAAoB,OAApBA,aAAoB,CAC5CC,OAAO,CAACC,GAAR,CAAY,eAAZ,CAA6BF,aAA7B,EACAC,OAAO,CAACC,GAAR,CAAY,cAAZ,CAA4BH,YAA5B,EACD,CAN6B,CAAjB,CAAf,CASA,cAAe,SAAS/B,CAAAA,cAAT,CAAwBmC,KAAxB,CAA+B,CAC5C,mBAAO,KAAC,QAAD,gBAAU,MAAM,CAAER,MAAlB,EAA8BQ,KAA9B,EAAP,CACD","sourcesContent":["import {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider as Provider,\n  createHttpLink,\n  split\n} from \"@apollo/client\"\n\nimport { setContext } from '@apollo/client/link/context'\nimport { WebSocketLink } from '@apollo/client/link/ws'\nimport { getMainDefinition } from '@apollo/client/utilities'\n\nlet httpLink = createHttpLink({\n  uri: 'https://group-chat-app-div.herokuapp.com/graphql',\n});\n\n// the setContext will set the header for all request\n// if token changes, it sets new token\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    }\n  }\n})\n\nhttpLink = authLink.concat(httpLink)\n\nconst wsLink = new WebSocketLink({\n  uri: 'wss://group-chat-app-div.herokuapp.com/subscriptions',\n  options: {\n    reconnect: true,\n    connectionParams: {\n      Authorization: `Bearer ${localStorage.getItem('token')}`\n    }\n  }\n})\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    )\n  },\n  wsLink,\n  httpLink,\n)\n\nconst client = new ApolloClient({\n  link: splitLink,\n  cache: new InMemoryCache(),\n  onError: ({ networkError, graphQLErrors }) => {\n    console.log('graphQLErrors', graphQLErrors)\n    console.log('networkError', networkError)\n  }\n})\n\nexport default function ApolloProvider(props) {\n  return <Provider client={client} {...props} />\n}"]},"metadata":{},"sourceType":"module"}