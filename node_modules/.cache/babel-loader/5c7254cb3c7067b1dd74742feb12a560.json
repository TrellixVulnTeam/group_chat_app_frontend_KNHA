{"ast":null,"code":"var _jsxFileName = \"/Users/divyanshisaxena/Desktop/divyanshi/learning/gql/group-chat-app/client/src/ApolloProvider.js\";\nimport { ApolloClient, InMemoryCache, ApolloProvider as Provider, createHttpLink, split } from \"@apollo/client\";\nimport { setContext } from '@apollo/client/link/context';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet httpLink = createHttpLink({\n  uri: '/graphql'\n}); // the setContext will set the header for all request\n// if token changes, it sets new token\n\nconst authLink = setContext((_, {\n  headers\n}) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('token'); // return the headers to the context so httpLink can read them\n\n  return {\n    headers: { ...headers,\n      authorization: token ? `Bearer ${token}` : \"\"\n    }\n  };\n});\nhttpLink = authLink.concat(httpLink);\nconst wsLink = new WebSocketLink({\n  uri: 'ws://localhost:4000/subscriptions',\n  options: {\n    reconnect: true,\n    connectionParams: {\n      Authorization: `Bearer ${localStorage.getItem('token')}`\n    }\n  }\n});\nconst splitLink = split(({\n  query\n}) => {\n  const definition = getMainDefinition(query);\n  return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n}, wsLink, httpLink);\nconst client = new ApolloClient({\n  link: splitLink,\n  cache: new InMemoryCache(),\n  onError: ({\n    networkError,\n    graphQLErrors\n  }) => {\n    console.log('graphQLErrors', graphQLErrors);\n    console.log('networkError', networkError);\n  }\n});\nexport default function ApolloProvider(props) {\n  return /*#__PURE__*/_jsxDEV(Provider, {\n    client: client,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 10\n  }, this);\n}\n_c = ApolloProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ApolloProvider\");","map":{"version":3,"sources":["/Users/divyanshisaxena/Desktop/divyanshi/learning/gql/group-chat-app/client/src/ApolloProvider.js"],"names":["ApolloClient","InMemoryCache","ApolloProvider","Provider","createHttpLink","split","setContext","WebSocketLink","getMainDefinition","httpLink","uri","authLink","_","headers","token","localStorage","getItem","authorization","concat","wsLink","options","reconnect","connectionParams","Authorization","splitLink","query","definition","kind","operation","client","link","cache","onError","networkError","graphQLErrors","console","log","props"],"mappings":";AAAA,SACEA,YADF,EAEEC,aAFF,EAGEC,cAAc,IAAIC,QAHpB,EAIEC,cAJF,EAKEC,KALF,QAMO,gBANP;AAQA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,iBAAT,QAAkC,0BAAlC;;AAEA,IAAIC,QAAQ,GAAGL,cAAc,CAAC;AAC5BM,EAAAA,GAAG,EAAE;AADuB,CAAD,CAA7B,C,CAIA;AACA;;AACA,MAAMC,QAAQ,GAAGL,UAAU,CAAC,CAACM,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C;AACA,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd,CAF8C,CAG9C;;AACA,SAAO;AACLH,IAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEPI,MAAAA,aAAa,EAAEH,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AAFpC;AADJ,GAAP;AAMD,CAV0B,CAA3B;AAYAL,QAAQ,GAAGE,QAAQ,CAACO,MAAT,CAAgBT,QAAhB,CAAX;AAEA,MAAMU,MAAM,GAAG,IAAIZ,aAAJ,CAAkB;AAC/BG,EAAAA,GAAG,EAAE,mCAD0B;AAE/BU,EAAAA,OAAO,EAAE;AACPC,IAAAA,SAAS,EAAE,IADJ;AAEPC,IAAAA,gBAAgB,EAAE;AAChBC,MAAAA,aAAa,EAAG,UAASR,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA8B;AADvC;AAFX;AAFsB,CAAlB,CAAf;AAUA,MAAMQ,SAAS,GAAGnB,KAAK,CACrB,CAAC;AAAEoB,EAAAA;AAAF,CAAD,KAAe;AACb,QAAMC,UAAU,GAAGlB,iBAAiB,CAACiB,KAAD,CAApC;AACA,SACEC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF3B;AAID,CAPoB,EAQrBT,MARqB,EASrBV,QATqB,CAAvB;AAYA,MAAMoB,MAAM,GAAG,IAAI7B,YAAJ,CAAiB;AAC9B8B,EAAAA,IAAI,EAAEN,SADwB;AAE9BO,EAAAA,KAAK,EAAE,IAAI9B,aAAJ,EAFuB;AAG9B+B,EAAAA,OAAO,EAAE,CAAC;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,GAAD,KAAqC;AAC5CC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,aAA7B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,YAA5B;AACD;AAN6B,CAAjB,CAAf;AASA,eAAe,SAAS/B,cAAT,CAAwBmC,KAAxB,EAA+B;AAC5C,sBAAO,QAAC,QAAD;AAAU,IAAA,MAAM,EAAER,MAAlB;AAAA,OAA8BQ;AAA9B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;KAFuBnC,c","sourcesContent":["import {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider as Provider,\n  createHttpLink,\n  split\n} from \"@apollo/client\"\n\nimport { setContext } from '@apollo/client/link/context'\nimport { WebSocketLink } from '@apollo/client/link/ws'\nimport { getMainDefinition } from '@apollo/client/utilities'\n\nlet httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// the setContext will set the header for all request\n// if token changes, it sets new token\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    }\n  }\n})\n\nhttpLink = authLink.concat(httpLink)\n\nconst wsLink = new WebSocketLink({\n  uri: 'ws://localhost:4000/subscriptions',\n  options: {\n    reconnect: true,\n    connectionParams: {\n      Authorization: `Bearer ${localStorage.getItem('token')}`\n    }\n  }\n})\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    )\n  },\n  wsLink,\n  httpLink,\n)\n\nconst client = new ApolloClient({\n  link: splitLink,\n  cache: new InMemoryCache(),\n  onError: ({ networkError, graphQLErrors }) => {\n    console.log('graphQLErrors', graphQLErrors)\n    console.log('networkError', networkError)\n  }\n})\n\nexport default function ApolloProvider(props) {\n  return <Provider client={client} {...props} />\n}"]},"metadata":{},"sourceType":"module"}