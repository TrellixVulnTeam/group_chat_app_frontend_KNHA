{"ast":null,"code":"var _jsxFileName = \"/Users/divyanshisaxena/Desktop/divyanshi/learning/gql/group-chat-app/client/src/pages/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect } from 'react';\nimport { gql, useLazyQuery, useMutation } from '@apollo/client';\nimport { useAuthDispatch, useAuthState } from '../context/auth';\nimport { useMessageState, useMessageDispatch } from '../context/message';\nimport { Row, Col, Button, Card } from 'react-bootstrap';\nimport classNames from 'classnames';\nimport moment from 'moment';\nimport { Chatroom } from './Chatroom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_GROUP_COUNT = gql`\n  query getGroupCount{\n    getGroupCount\n  }\n`;\nconst GET_GROUPS = gql`\n  mutation getGroups($page: Int!){\n    getGroups(page: $page){\n      groupname groupdesc createdAt\n    }\n  }\n`;\nexport const Home = () => {\n  _s();\n\n  var _groups$find;\n\n  const authDispatch = useAuthDispatch();\n  const {\n    user\n  } = useAuthState();\n  const dispatch = useMessageDispatch();\n  const {\n    groups\n  } = useMessageState();\n  const selectedGroup = groups === null || groups === void 0 ? void 0 : (_groups$find = groups.find(group => group.selected === true)) === null || _groups$find === void 0 ? void 0 : _groups$find.groupname;\n  const [clicked, setClicked] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalGroups, setTotalGroups] = useState(0); // const [totalPages, setTotalPages] = useState([])\n\n  let pageNumbers = []; // const [groups, setGroups] = useState([])\n  // const [getGroups, { loading, data, error }] = useLazyQuery(GET_GROUPS)\n  // const { loading } = useMutation(GET_GROUPS, {\n  //   onCompleted: (data) => dispatch({ type: 'SET_GROUPS', payload: data.getGroups }),\n  //   onError: (err) => console.log('error in query: ', err)\n  // })\n\n  const [getGroupCount, {\n    data: countData\n  }] = useLazyQuery(GET_GROUP_COUNT, {\n    onError: err => console.log('errrrrr', err),\n    onCompleted: data => {\n      console.log('count: ', data);\n      setTotalGroups(data.getGroupCount);\n    }\n  });\n  const [getGroups, {\n    loading,\n    data: groupsData\n  }] = useMutation(GET_GROUPS, {\n    onError: err => console.log(err)\n  });\n\n  if (totalGroups > 0) {\n    for (let i = 1; i <= Math.ceil(totalGroups / 3); i++) {\n      pageNumbers.push(i);\n    }\n  }\n\n  useEffect(() => {\n    getGroupCount(); // if (totalGroups > 0)\n    // {\n    // console.log('getGroupCount data: ', countData.getGroupCount)\n    // setTotalGroups(data.getGroupCount)\n\n    console.log('total groups: ', totalGroups);\n    getGroups({\n      variables: {\n        page: currentPage\n      }\n    });\n    dispatch({\n      type: 'SET_GROUPS',\n      payload: groupsData.getGroups\n    }); // }\n  }, [currentPage, totalGroups]);\n  let groupsMarkup;\n\n  if (!groups || loading) {\n    groupsMarkup = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"loading..\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 20\n    }, this);\n  } else if (groups.length === 0) {\n    groupsMarkup = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"no groups created yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 20\n    }, this);\n  } else if (groups.length > 0) {\n    groupsMarkup = groups.map(group => {\n      const selected = selectedGroup === group.groupname;\n      return /*#__PURE__*/_jsxDEV(Col, {\n        sm: 12,\n        md: 6,\n        lg: 4,\n        className: \"my-2 mx-auto\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          className: \"text-center pt-1\",\n          children: [/*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n              className: \"text-uppercase\",\n              children: group.groupname\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              className: \"text-capitalize\",\n              children: group.groupdesc\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"primary\",\n              className: classNames(\"mb-3\", {\n                'btn-warning': selected\n              }),\n              onClick: () => {\n                dispatch({\n                  type: 'SET_SELECTED_GROUP',\n                  payload: group.groupname\n                });\n                setClicked(true);\n              },\n              children: \"Enter group\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n            className: \"text-muted\",\n            children: [\"Created: \", moment(group.createdAt).format('MMM DD, YYYY @ h:mm a')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }, this)\n      }, group.groupname, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this);\n    });\n  }\n\n  const logout = () => {\n    authDispatch({\n      type: 'LOGOUT'\n    });\n    window.location.href = '/login';\n  };\n\n  const paginate = pageNumber => {\n    console.log('selected page number: ', pageNumber);\n    setCurrentPage(pageNumber);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-end mx-auto mb-3\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        className: \"text-end\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"link\",\n          className: \"btn-light text-decoration-none\",\n          onClick: logout,\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: clicked === false ? groupsMarkup : /*#__PURE__*/_jsxDEV(Chatroom, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 45\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"pagination justify-content-end\",\n        children: pageNumbers.map(page => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"page-item\",\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            onClick: () => paginate(page),\n            href: \"#\",\n            className: \"page-link\",\n            children: page\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this)\n        }, page, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"oRIfZDPOY/F/RFoNNKvci9NRMI4=\", false, function () {\n  return [useAuthDispatch, useAuthState, useMessageDispatch, useMessageState, useLazyQuery, useMutation];\n});\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/divyanshisaxena/Desktop/divyanshi/learning/gql/group-chat-app/client/src/pages/Home.js"],"names":["React","Fragment","useState","useEffect","gql","useLazyQuery","useMutation","useAuthDispatch","useAuthState","useMessageState","useMessageDispatch","Row","Col","Button","Card","classNames","moment","Chatroom","GET_GROUP_COUNT","GET_GROUPS","Home","authDispatch","user","dispatch","groups","selectedGroup","find","group","selected","groupname","clicked","setClicked","currentPage","setCurrentPage","totalGroups","setTotalGroups","pageNumbers","getGroupCount","data","countData","onError","err","console","log","onCompleted","getGroups","loading","groupsData","i","Math","ceil","push","variables","page","type","payload","groupsMarkup","length","map","groupdesc","createdAt","format","logout","window","location","href","paginate","pageNumber"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react'\nimport { gql, useLazyQuery, useMutation } from '@apollo/client'\nimport { useAuthDispatch, useAuthState } from '../context/auth'\nimport { useMessageState, useMessageDispatch } from '../context/message'\nimport { Row, Col, Button, Card } from 'react-bootstrap'\nimport classNames from 'classnames'\nimport moment from 'moment'\nimport { Chatroom } from './Chatroom'\n\nconst GET_GROUP_COUNT = gql`\n  query getGroupCount{\n    getGroupCount\n  }\n`\n\nconst GET_GROUPS = gql`\n  mutation getGroups($page: Int!){\n    getGroups(page: $page){\n      groupname groupdesc createdAt\n    }\n  }\n`\nexport const Home = () => {\n  const authDispatch = useAuthDispatch()\n  const { user } = useAuthState()\n  const dispatch = useMessageDispatch()\n  const { groups } = useMessageState()\n  const selectedGroup = groups?.find(group => group.selected === true)?.groupname\n  const [clicked, setClicked] = useState(false)\n  const [currentPage, setCurrentPage] = useState(1)\n  const [totalGroups, setTotalGroups] = useState(0)\n  // const [totalPages, setTotalPages] = useState([])\n  let pageNumbers = []\n  // const [groups, setGroups] = useState([])\n\n  // const [getGroups, { loading, data, error }] = useLazyQuery(GET_GROUPS)\n  // const { loading } = useMutation(GET_GROUPS, {\n  //   onCompleted: (data) => dispatch({ type: 'SET_GROUPS', payload: data.getGroups }),\n  //   onError: (err) => console.log('error in query: ', err)\n  // })\n\n  const [getGroupCount, { data: countData }] = useLazyQuery(GET_GROUP_COUNT, {\n    onError: (err) => console.log('errrrrr', err),\n    onCompleted: (data) => {\n      console.log('count: ', data)\n      setTotalGroups(data.getGroupCount)\n    }\n  })\n\n  const [getGroups, { loading, data: groupsData }] = useMutation(GET_GROUPS, {\n    onError: (err) => console.log(err)\n  })\n\n  if (totalGroups > 0) {\n    for (let i = 1; i <= Math.ceil(totalGroups / 3); i++){\n      pageNumbers.push(i)\n    }\n  }\n  useEffect(() => {\n    getGroupCount()\n    // if (totalGroups > 0)\n    // {\n    // console.log('getGroupCount data: ', countData.getGroupCount)\n      // setTotalGroups(data.getGroupCount)\n      console.log('total groups: ', totalGroups)\n      getGroups({\n        variables: {\n          page: currentPage\n        }\n      })\n      dispatch({ type: 'SET_GROUPS', payload: groupsData.getGroups })\n    // }\n  }, [currentPage, totalGroups])\n  let groupsMarkup\n  if (!groups || loading) {\n    groupsMarkup = <p>loading..</p>\n  } else if (groups.length === 0) {\n    groupsMarkup = <p>no groups created yet</p>\n  } else if (groups.length > 0) {\n    groupsMarkup = groups.map(group => {\n      const selected = selectedGroup === group.groupname\n      return (\n        <Col sm={12} md={6} lg={4} className=\"my-2 mx-auto\" key={group.groupname}>\n        <Card className=\"text-center pt-1\">\n          {/* <Card.Header>Featured</Card.Header> */}\n          <Card.Body>\n            <Card.Title className=\"text-uppercase\">\n              {group.groupname}\n              {/* title */}\n            </Card.Title>\n            <Card.Text className=\"text-capitalize\">\n              {group.groupdesc}\n              {/* text */}\n            </Card.Text>\n            <Button variant=\"primary\"\n              className={classNames(\"mb-3\",{ 'btn-warning': selected })}\n                onClick={() => {\n                  dispatch({ type: 'SET_SELECTED_GROUP', payload: group.groupname })\n                  setClicked(true)\n                  }\n                }>\n                Enter group\n              </Button>\n          </Card.Body>\n          <Card.Footer className=\"text-muted\">\n            Created: {moment(group.createdAt).format('MMM DD, YYYY @ h:mm a')}\n            {/* footer */}\n          </Card.Footer>\n        </Card></Col>\n      )\n    })\n  }\n  \n  const logout = () => {\n    authDispatch({ type: 'LOGOUT' })\n    window.location.href = '/login'\n  }\n\n  const paginate = (pageNumber) => {\n    console.log('selected page number: ', pageNumber)\n    setCurrentPage(pageNumber)\n  }\n  return (\n    <Fragment>\n      <Row className=\"justify-content-end mx-auto mb-3\">\n        <Col className=\"text-end\">\n          <Button variant=\"link\" className=\"btn-light text-decoration-none\"\n            onClick={logout}>Logout</Button>\n        </Col>\n      </Row>\n      <Row>\n        {clicked === false ? groupsMarkup : <Chatroom />}\n      </Row>\n      \n      <nav>\n      <ul className=\"pagination justify-content-end\">\n        {pageNumbers.map(page => (\n          <li className=\"page-item\" key={page}>\n            <a onClick={() => paginate(page)} href=\"#\" className=\"page-link\">{page}</a>\n          </li>\n        ))}\n      </ul>\n      </nav>\n      \n    </Fragment>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}