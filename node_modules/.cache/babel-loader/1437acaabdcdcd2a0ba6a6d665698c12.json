{"ast":null,"code":"var _jsxFileName = \"/Users/divyanshisaxena/Desktop/divyanshi/learning/gql/group-chat-app/client/src/context/auth.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { createContext, useContext, useReducer } from 'react';\nimport jwtDecode from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthStateContext = /*#__PURE__*/createContext();\nconst AuthDispatchContext = /*#__PURE__*/createContext();\nlet user = null;\nconst token = localStorage.getItem('token');\n\nif (token) {\n  const decodedToken = jwtDecode(token); // since we have expiry value 'exp' in the token payload, we need to check is login is expired\n\n  const expiresAt = new Date(decodedToken.exp * 1000);\n  console.log('expiry ', expiresAt);\n\n  if (new Date() > expiresAt) {\n    localStorage.removeItem('token');\n  } else {\n    user = decodedToken;\n  }\n} else {\n  console.log('no token found');\n}\n\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOGIN':\n      localStorage.setItem('token', action.payload.token);\n      return { ...state,\n        user: action.payload\n      };\n\n    case 'LOGOUT':\n      localStorage.removeItem('token');\n      return { ...state,\n        user: null\n      };\n\n    default:\n      throw new Error(`Unknown action type: ${action.type}`);\n  }\n};\n\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(authReducer, {\n    user\n  });\n  return /*#__PURE__*/_jsxDEV(AuthDispatchContext.Provider, {\n    value: dispatch,\n    children: /*#__PURE__*/_jsxDEV(AuthStateContext.Provider, {\n      value: state,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"zukBfbAun17nwqH42keB2ju9+No=\");\n\n_c = AuthProvider;\nexport const useAuthState = () => {\n  _s2();\n\n  return useContext(AuthStateContext);\n};\n\n_s2(useAuthState, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const useAuthDispatch = () => {\n  _s3();\n\n  return useContext(AuthDispatchContext);\n};\n\n_s3(useAuthDispatch, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/divyanshisaxena/Desktop/divyanshi/learning/gql/group-chat-app/client/src/context/auth.js"],"names":["React","createContext","useContext","useReducer","jwtDecode","AuthStateContext","AuthDispatchContext","user","token","localStorage","getItem","decodedToken","expiresAt","Date","exp","console","log","removeItem","authReducer","state","action","type","setItem","payload","Error","AuthProvider","children","dispatch","useAuthState","useAuthDispatch"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,UAA3C,QAA6D,OAA7D;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,gBAAgB,gBAAGJ,aAAa,EAAtC;AACA,MAAMK,mBAAmB,gBAAGL,aAAa,EAAzC;AAEA,IAAIM,IAAI,GAAG,IAAX;AACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,IAAIF,KAAJ,EAAW;AACT,QAAMG,YAAY,GAAGP,SAAS,CAACI,KAAD,CAA9B,CADS,CAET;;AACA,QAAMI,SAAS,GAAG,IAAIC,IAAJ,CAASF,YAAY,CAACG,GAAb,GAAmB,IAA5B,CAAlB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBJ,SAAvB;;AACA,MAAI,IAAIC,IAAJ,KAAaD,SAAjB,EAA4B;AAC1BH,IAAAA,YAAY,CAACQ,UAAb,CAAwB,OAAxB;AACD,GAFD,MAGK;AACHV,IAAAA,IAAI,GAAGI,YAAP;AACD;AACF,CAXD,MAYK;AACHI,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACD;;AAED,MAAME,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,OAAL;AACEZ,MAAAA,YAAY,CAACa,OAAb,CAAqB,OAArB,EAA8BF,MAAM,CAACG,OAAP,CAAef,KAA7C;AACA,aAAO,EACL,GAAGW,KADE;AAELZ,QAAAA,IAAI,EAAEa,MAAM,CAACG;AAFR,OAAP;;AAIF,SAAK,QAAL;AACEd,MAAAA,YAAY,CAACQ,UAAb,CAAwB,OAAxB;AACA,aAAO,EACL,GAAGE,KADE;AAELZ,QAAAA,IAAI,EAAE;AAFD,OAAP;;AAIF;AACE,YAAM,IAAIiB,KAAJ,CAAW,wBAAuBJ,MAAM,CAACC,IAAK,EAA9C,CAAN;AAdJ;AAgBD,CAjBD;;AAmBA,OAAO,MAAMI,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC5C,QAAM,CAACP,KAAD,EAAQQ,QAAR,IAAoBxB,UAAU,CAACe,WAAD,EAAc;AAAEX,IAAAA;AAAF,GAAd,CAApC;AACA,sBACE,QAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAEoB,QAArC;AAAA,2BACE,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,MAAA,KAAK,EAAER,KAAlC;AAAA,gBACGO;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CATM;;GAAMD,Y;;KAAAA,Y;AAWb,OAAO,MAAMG,YAAY,GAAG;AAAA;;AAAA,SAAM1B,UAAU,CAACG,gBAAD,CAAhB;AAAA,CAArB;;IAAMuB,Y;;AACb,OAAO,MAAMC,eAAe,GAAG;AAAA;;AAAA,SAAM3B,UAAU,CAACI,mBAAD,CAAhB;AAAA,CAAxB;;IAAMuB,e","sourcesContent":["import React, { createContext, useContext, useReducer } from 'react'\nimport jwtDecode from 'jwt-decode'\n\nconst AuthStateContext = createContext()\nconst AuthDispatchContext = createContext()\n\nlet user = null\nconst token = localStorage.getItem('token')\nif (token) {\n  const decodedToken = jwtDecode(token)\n  // since we have expiry value 'exp' in the token payload, we need to check is login is expired\n  const expiresAt = new Date(decodedToken.exp * 1000) \n  console.log('expiry ', expiresAt)\n  if (new Date() > expiresAt) {\n    localStorage.removeItem('token')\n  }\n  else {\n    user = decodedToken\n  }\n}\nelse {\n  console.log('no token found')\n}\n\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOGIN':\n      localStorage.setItem('token', action.payload.token)\n      return {\n        ...state,\n        user: action.payload\n      }\n    case 'LOGOUT':\n      localStorage.removeItem('token')\n      return {\n        ...state,\n        user: null\n      }\n    default:\n      throw new Error(`Unknown action type: ${action.type}`)\n  }\n}\n\nexport const AuthProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, { user })\n  return (\n    <AuthDispatchContext.Provider value={dispatch}>\n      <AuthStateContext.Provider value={state}>\n        {children}\n      </AuthStateContext.Provider>\n    </AuthDispatchContext.Provider>\n  )\n}\n\nexport const useAuthState = () => useContext(AuthStateContext)\nexport const useAuthDispatch = () => useContext(AuthDispatchContext)"]},"metadata":{},"sourceType":"module"}