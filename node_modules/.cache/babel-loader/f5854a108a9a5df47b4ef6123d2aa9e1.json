{"ast":null,"code":"var _jsxFileName = \"/Users/divyanshisaxena/Desktop/divyanshi/learning/gql/group-chat-app/client/src/context/message.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { createContext, useContext, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageStateContext = /*#__PURE__*/createContext();\nconst MessageDispatchContext = /*#__PURE__*/createContext();\n\nconst messageReducer = (state, action) => {\n  // let usersCopy, userIndex\n  let groupsCopy, groupIndex;\n  const {\n    groupname,\n    message,\n    messages\n  } = action.payload;\n\n  switch (action.type) {\n    case 'SET_GROUPS':\n      return { ...state,\n        groups: action.payload\n      };\n\n    case 'SET_GROUP_MESSAGES':\n      groupsCopy = [...state.groups];\n      groupIndex = groupsCopy.findIndex(group => group.groupname === groupname);\n      groupsCopy[groupIndex] = { ...groupsCopy[groupIndex],\n        messages\n      };\n      return { ...state,\n        groups: groupsCopy\n      };\n\n    case 'SET_SELECTED_GROUP':\n      groupsCopy = state.groups.map(group => ({ ...group,\n        selected: group.groupname === action.payload\n      }));\n      return { ...state,\n        groups: groupsCopy\n      };\n\n    case 'ADD_MESSAGE':\n      groupsCopy = [...state.groups];\n      groupIndex = groupsCopy.findIndex(group => group.groupname === groupname);\n      let newGroup = { ...groupsCopy[groupIndex],\n        messages: groupsCopy[groupIndex].messages ? [message, ...groupsCopy[groupIndex].messages] : null\n      };\n      groupsCopy[groupIndex] = newGroup;\n      return { ...state,\n        groups: groupsCopy\n      };\n    //   usersCopy = [...state.users]\n    //   userIndex = usersCopy.findIndex(u => u.username === username)\n    //   message.reactions = []\n    //   let newUser = {\n    //     ...usersCopy[userIndex],\n    //     messages: usersCopy[userIndex].messages\n    //       ? [message, ...usersCopy[userIndex].messages]\n    //       : null,\n    //     latestMessage: message\n    //   }\n    //   usersCopy[userIndex] = newUser\n    //   return {\n    //     ...state,\n    //     users: usersCopy\n    //   }\n  }\n};\n\nexport const MessageProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(messageReducer, {\n    groups: null\n  });\n  return /*#__PURE__*/_jsxDEV(MessageDispatchContext.Provider, {\n    value: dispatch,\n    children: /*#__PURE__*/_jsxDEV(MessageStateContext.Provider, {\n      value: state,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MessageProvider, \"/jjA9M+XxEOL3xZPjbRpyObyWHU=\");\n\n_c = MessageProvider;\nexport const useMessageState = () => {\n  _s2();\n\n  return useContext(MessageStateContext);\n};\n\n_s2(useMessageState, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const useMessageDispatch = () => {\n  _s3();\n\n  return useContext(MessageDispatchContext);\n};\n\n_s3(useMessageDispatch, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageProvider\");","map":{"version":3,"sources":["/Users/divyanshisaxena/Desktop/divyanshi/learning/gql/group-chat-app/client/src/context/message.js"],"names":["React","createContext","useContext","useReducer","MessageStateContext","MessageDispatchContext","messageReducer","state","action","groupsCopy","groupIndex","groupname","message","messages","payload","type","groups","findIndex","group","map","selected","newGroup","MessageProvider","children","dispatch","useMessageState","useMessageDispatch"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useReducer } from 'react'\n\nconst MessageStateContext = createContext()\nconst MessageDispatchContext = createContext()\n\nconst messageReducer = (state, action) => {\n  // let usersCopy, userIndex\n  let groupsCopy, groupIndex\n  const { groupname, message, messages } = action.payload\n  switch (action.type) {\n    case 'SET_GROUPS':\n      return {\n        ...state,\n        groups: action.payload\n      }\n    case 'SET_GROUP_MESSAGES':\n      groupsCopy = [...state.groups]\n      groupIndex = groupsCopy.findIndex(group => group.groupname === groupname)\n      groupsCopy[groupIndex] = {...groupsCopy[groupIndex], messages}\n      return {\n        ...state,\n        groups: groupsCopy\n      }\n    case 'SET_SELECTED_GROUP':\n      groupsCopy = state.groups.map(group => ({\n        ...group,\n        selected: group.groupname === action.payload\n      }))\n      return {\n        ...state,\n        groups: groupsCopy\n      }\n    case 'ADD_MESSAGE':\n      groupsCopy = [...state.groups]\n      groupIndex = groupsCopy.findIndex(group => group.groupname === groupname)\n      let newGroup = {\n        ...groupsCopy[groupIndex],\n        messages: groupsCopy[groupIndex].messages\n          ? [message, ...groupsCopy[groupIndex].messages]\n          : null\n      }\n      groupsCopy[groupIndex] = newGroup\n      return {\n        ...state,\n        groups: groupsCopy\n      }\n    //   usersCopy = [...state.users]\n    //   userIndex = usersCopy.findIndex(u => u.username === username)\n    //   message.reactions = []\n    //   let newUser = {\n    //     ...usersCopy[userIndex],\n    //     messages: usersCopy[userIndex].messages\n    //       ? [message, ...usersCopy[userIndex].messages]\n    //       : null,\n    //     latestMessage: message\n    //   }\n    //   usersCopy[userIndex] = newUser\n    //   return {\n    //     ...state,\n    //     users: usersCopy\n    //   }\n  }\n}\nexport const MessageProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(messageReducer, { groups: null })\n  return (\n    <MessageDispatchContext.Provider value={dispatch}>\n      <MessageStateContext.Provider value={state}>\n        {children}\n      </MessageStateContext.Provider>\n    </MessageDispatchContext.Provider>\n  )\n}\n\nexport const useMessageState = () => useContext(MessageStateContext)\nexport const useMessageDispatch = () => useContext(MessageDispatchContext)"]},"metadata":{},"sourceType":"module"}