{"ast":null,"code":"import _slicedToArray from\"/Users/divyanshisaxena/Desktop/divyanshi/learning/gql/group-chat-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _toConsumableArray from\"/Users/divyanshisaxena/Desktop/divyanshi/learning/gql/group-chat-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/divyanshisaxena/Desktop/divyanshi/learning/gql/group-chat-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React,{createContext,useContext,useReducer}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";var MessageStateContext=/*#__PURE__*/createContext();var MessageDispatchContext=/*#__PURE__*/createContext();var messageReducer=function messageReducer(state,action){var groupsCopy,groupIndex;var _action$payload=action.payload,groupname=_action$payload.groupname,message=_action$payload.message,messages=_action$payload.messages;switch(action.type){case'SET_GROUPS':return _objectSpread(_objectSpread({},state),{},{groups:action.payload});case'SET_GROUP_MESSAGES':groupsCopy=_toConsumableArray(state.groups);groupIndex=groupsCopy.findIndex(function(group){return group.groupname===groupname;});groupsCopy[groupIndex]=_objectSpread(_objectSpread({},groupsCopy[groupIndex]),{},{messages:messages});return _objectSpread(_objectSpread({},state),{},{groups:groupsCopy});case'SET_SELECTED_GROUP':groupsCopy=state.groups.map(function(group){return _objectSpread(_objectSpread({},group),{},{selected:group.groupname===action.payload});});return _objectSpread(_objectSpread({},state),{},{groups:groupsCopy});case'ADD_MESSAGE':groupsCopy=_toConsumableArray(state.groups);groupIndex=groupsCopy.findIndex(function(group){return group.groupname===groupname;});var newGroup=_objectSpread(_objectSpread({},groupsCopy[groupIndex]),{},{messages:groupsCopy[groupIndex].messages?[message].concat(_toConsumableArray(groupsCopy[groupIndex].messages)):null});groupsCopy[groupIndex]=newGroup;console.log('new group : ',newGroup);return _objectSpread(_objectSpread({},state),{},{groups:groupsCopy});}};export var MessageProvider=function MessageProvider(_ref){var children=_ref.children;var _useReducer=useReducer(messageReducer,{groups:null}),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];return/*#__PURE__*/_jsx(MessageDispatchContext.Provider,{value:dispatch,children:/*#__PURE__*/_jsx(MessageStateContext.Provider,{value:state,children:children})});};export var useMessageState=function useMessageState(){return useContext(MessageStateContext);};export var useMessageDispatch=function useMessageDispatch(){return useContext(MessageDispatchContext);};","map":{"version":3,"sources":["/Users/divyanshisaxena/Desktop/divyanshi/learning/gql/group-chat-app/client/src/context/message.js"],"names":["React","createContext","useContext","useReducer","MessageStateContext","MessageDispatchContext","messageReducer","state","action","groupsCopy","groupIndex","payload","groupname","message","messages","type","groups","findIndex","group","map","selected","newGroup","console","log","MessageProvider","children","dispatch","useMessageState","useMessageDispatch"],"mappings":"6kBAAA,MAAOA,CAAAA,KAAP,EAAgBC,aAAhB,CAA+BC,UAA/B,CAA2CC,UAA3C,KAA6D,OAA7D,C,2CAEA,GAAMC,CAAAA,mBAAmB,cAAGH,aAAa,EAAzC,CACA,GAAMI,CAAAA,sBAAsB,cAAGJ,aAAa,EAA5C,CAEA,GAAMK,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,KAAD,CAAQC,MAAR,CAAmB,CACxC,GAAIC,CAAAA,UAAJ,CAAgBC,UAAhB,CACA,oBAAyCF,MAAM,CAACG,OAAhD,CAAQC,SAAR,iBAAQA,SAAR,CAAmBC,OAAnB,iBAAmBA,OAAnB,CAA4BC,QAA5B,iBAA4BA,QAA5B,CACA,OAAQN,MAAM,CAACO,IAAf,EACE,IAAK,YAAL,CACE,sCACKR,KADL,MAEES,MAAM,CAAER,MAAM,CAACG,OAFjB,GAIF,IAAK,oBAAL,CACEF,UAAU,oBAAOF,KAAK,CAACS,MAAb,CAAV,CACAN,UAAU,CAAGD,UAAU,CAACQ,SAAX,CAAqB,SAAAC,KAAK,QAAIA,CAAAA,KAAK,CAACN,SAAN,GAAoBA,SAAxB,EAA1B,CAAb,CACAH,UAAU,CAACC,UAAD,CAAV,gCAA6BD,UAAU,CAACC,UAAD,CAAvC,MAAqDI,QAAQ,CAARA,QAArD,GACA,sCACKP,KADL,MAEES,MAAM,CAAEP,UAFV,GAIF,IAAK,oBAAL,CACEA,UAAU,CAAGF,KAAK,CAACS,MAAN,CAAaG,GAAb,CAAiB,SAAAD,KAAK,wCAC9BA,KAD8B,MAEjCE,QAAQ,CAAEF,KAAK,CAACN,SAAN,GAAoBJ,MAAM,CAACG,OAFJ,IAAtB,CAAb,CAIA,sCACKJ,KADL,MAEES,MAAM,CAAEP,UAFV,GAIF,IAAK,aAAL,CACEA,UAAU,oBAAOF,KAAK,CAACS,MAAb,CAAV,CACAN,UAAU,CAAGD,UAAU,CAACQ,SAAX,CAAqB,SAAAC,KAAK,QAAIA,CAAAA,KAAK,CAACN,SAAN,GAAoBA,SAAxB,EAA1B,CAAb,CACA,GAAIS,CAAAA,QAAQ,gCACPZ,UAAU,CAACC,UAAD,CADH,MAEVI,QAAQ,CAAEL,UAAU,CAACC,UAAD,CAAV,CAAuBI,QAAvB,EACLD,OADK,4BACOJ,UAAU,CAACC,UAAD,CAAV,CAAuBI,QAD9B,GAEN,IAJM,EAAZ,CAMAL,UAAU,CAACC,UAAD,CAAV,CAAyBW,QAAzB,CACAC,OAAO,CAACC,GAAR,CAAY,cAAZ,CAA4BF,QAA5B,EACA,sCACKd,KADL,MAEES,MAAM,CAAEP,UAFV,GAlCJ,CAuCD,CA1CD,CA2CA,MAAO,IAAMe,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,CAC/C,gBAA0BtB,UAAU,CAACG,cAAD,CAAiB,CAAEU,MAAM,CAAE,IAAV,CAAjB,CAApC,4CAAOT,KAAP,iBAAcmB,QAAd,iBACA,mBACE,KAAC,sBAAD,CAAwB,QAAxB,EAAiC,KAAK,CAAEA,QAAxC,uBACE,KAAC,mBAAD,CAAqB,QAArB,EAA8B,KAAK,CAAEnB,KAArC,UACGkB,QADH,EADF,EADF,CAOD,CATM,CAWP,MAAO,IAAME,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,SAAMzB,CAAAA,UAAU,CAACE,mBAAD,CAAhB,EAAxB,CACP,MAAO,IAAMwB,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,SAAM1B,CAAAA,UAAU,CAACG,sBAAD,CAAhB,EAA3B","sourcesContent":["import React, { createContext, useContext, useReducer } from 'react'\n\nconst MessageStateContext = createContext()\nconst MessageDispatchContext = createContext()\n\nconst messageReducer = (state, action) => {\n  let groupsCopy, groupIndex\n  const { groupname, message, messages } = action.payload\n  switch (action.type) {\n    case 'SET_GROUPS':\n      return {\n        ...state,\n        groups: action.payload\n      }\n    case 'SET_GROUP_MESSAGES':\n      groupsCopy = [...state.groups]\n      groupIndex = groupsCopy.findIndex(group => group.groupname === groupname)\n      groupsCopy[groupIndex] = {...groupsCopy[groupIndex], messages}\n      return {\n        ...state,\n        groups: groupsCopy\n      }\n    case 'SET_SELECTED_GROUP':\n      groupsCopy = state.groups.map(group => ({\n        ...group,\n        selected: group.groupname === action.payload\n      }))\n      return {\n        ...state,\n        groups: groupsCopy\n      }\n    case 'ADD_MESSAGE':\n      groupsCopy = [...state.groups]\n      groupIndex = groupsCopy.findIndex(group => group.groupname === groupname)\n      let newGroup = {\n        ...groupsCopy[groupIndex],\n        messages: groupsCopy[groupIndex].messages\n          ? [message, ...groupsCopy[groupIndex].messages]\n          : null\n      }\n      groupsCopy[groupIndex] = newGroup\n      console.log('new group : ', newGroup)\n      return {\n        ...state,\n        groups: groupsCopy\n      }\n  }\n}\nexport const MessageProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(messageReducer, { groups: null })\n  return (\n    <MessageDispatchContext.Provider value={dispatch}>\n      <MessageStateContext.Provider value={state}>\n        {children}\n      </MessageStateContext.Provider>\n    </MessageDispatchContext.Provider>\n  )\n}\n\nexport const useMessageState = () => useContext(MessageStateContext)\nexport const useMessageDispatch = () => useContext(MessageDispatchContext)"]},"metadata":{},"sourceType":"module"}