{"ast":null,"code":"var _jsxFileName = \"/Users/divyanshisaxena/Desktop/divyanshi/learning/gql/group-chat-app/client/src/pages/Chatroom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, Fragment, useState } from 'react';\nimport { Col, Form, Button } from 'react-bootstrap';\nimport { gql, useLazyQuery, useMutation, useSubscription } from '@apollo/client';\nimport { useMessageDispatch, useMessageState } from '../context/message';\nimport Message from './Message';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_MESSAGES = gql`\n  query getMessages($to: String!){\n    getMessages(to: $to){\n      content from to createdAt\n    }\n  }\n`;\nconst SEND_MESSAGE = gql`\n  mutation sendMessage($to: String! $content: String!){\n    sendMessage(to: $to content: $content){\n      id content from to createdAt\n    }\n  }\n`;\nexport const Chatroom = () => {\n  _s();\n\n  const {\n    groups\n  } = useMessageState();\n  const dispatch = useMessageDispatch();\n  const [content, setContent] = useState('');\n  const selectedGroup = groups === null || groups === void 0 ? void 0 : groups.find(group => group.selected === true); // console.log('selected group : ', selectedGroup)\n\n  const messages = selectedGroup === null || selectedGroup === void 0 ? void 0 : selectedGroup.messages; // console.log('messages: ', messages)\n\n  const [getMessages, {\n    loading: messagesLoading,\n    data: messagesData\n  }] = useLazyQuery(GET_MESSAGES);\n  const [sendMessage] = useMutation(SEND_MESSAGE, {\n    onError: err => console.log(err)\n  });\n  useEffect(() => {\n    if (selectedGroup && !selectedGroup.messages) {\n      getMessages({\n        variables: {\n          to: selectedGroup.groupname\n        }\n      });\n    }\n  }, [selectedGroup]);\n  useEffect(() => {\n    if (messagesData) {\n      console.log('messages Data : ', messagesData);\n      dispatch({\n        type: 'SET_GROUP_MESSAGES',\n        payload: {\n          groupname: selectedGroup.groupname,\n          messages: messagesData.getMessages\n        }\n      });\n    }\n  }, [messagesData]);\n\n  const submitMessage = e => {\n    e.preventDefault();\n    if (content.trim() === '' || !selectedGroup) return;\n    console.log('send message: ', content);\n    setContent(''); //mutation for sending a message\n\n    sendMessage({\n      variables: {\n        to: selectedGroup.groupname,\n        content\n      }\n    });\n  };\n\n  let selectedChatMarkup;\n\n  if (!messages && !messagesLoading) {\n    selectedChatMarkup = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"info-text\",\n      children: \"Select a friend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 26\n    }, this);\n  } else if (messagesLoading) {\n    selectedChatMarkup = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"info-text\",\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 26\n    }, this);\n  } else if (messages.length > 0) {\n    selectedChatMarkup = messages.map((message, index) => /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Message, {\n        message: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), index === messages.length - 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"invisible\",\n        children: /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"m-0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)]\n    }, message.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this));\n  } else if (messages.length === 0) {\n    selectedChatMarkup = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"info-text\",\n      children: \"You are now connected! send your first message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 26\n    }, this);\n  }\n\n  const home = () => {\n    window.location.href = '/';\n  };\n\n  return /*#__PURE__*/_jsxDEV(Col, {\n    xs: 10,\n    md: 8,\n    className: \"p-0\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"link\",\n        className: \"btn-light text-decoration-none\",\n        onClick: home,\n        children: \"Back to home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-box d-flex flex-column-reverse mt-2 p-3\",\n      children: selectedChatMarkup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"px-3 py-2 mb-3 mt-2\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: submitMessage,\n        children: /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"d-flex align-items-center m-0\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            className: \"message-input rounded-pill bg-secondary p-3 border-0\",\n            placeholder: \"Type a message...\",\n            value: content,\n            onChange: e => setContent(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-paper-plane fa-2x text-primary ms-2\",\n            role: \"button\",\n            onClick: submitMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chatroom, \"pMzdOoLnahcAhB1otNvQcJLMFbE=\", false, function () {\n  return [useMessageState, useMessageDispatch, useLazyQuery, useMutation];\n});\n\n_c = Chatroom;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chatroom\");","map":{"version":3,"sources":["/Users/divyanshisaxena/Desktop/divyanshi/learning/gql/group-chat-app/client/src/pages/Chatroom.js"],"names":["React","useEffect","Fragment","useState","Col","Form","Button","gql","useLazyQuery","useMutation","useSubscription","useMessageDispatch","useMessageState","Message","GET_MESSAGES","SEND_MESSAGE","Chatroom","groups","dispatch","content","setContent","selectedGroup","find","group","selected","messages","getMessages","loading","messagesLoading","data","messagesData","sendMessage","onError","err","console","log","variables","to","groupname","type","payload","submitMessage","e","preventDefault","trim","selectedChatMarkup","length","map","message","index","id","home","window","location","href","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, Fragment, useState } from 'react'\nimport { Col, Form, Button } from 'react-bootstrap'\nimport { gql, useLazyQuery, useMutation, useSubscription } from '@apollo/client'\nimport { useMessageDispatch, useMessageState } from '../context/message'\nimport Message from './Message'\n\nconst GET_MESSAGES = gql`\n  query getMessages($to: String!){\n    getMessages(to: $to){\n      content from to createdAt\n    }\n  }\n`\n\nconst SEND_MESSAGE = gql`\n  mutation sendMessage($to: String! $content: String!){\n    sendMessage(to: $to content: $content){\n      id content from to createdAt\n    }\n  }\n`\nexport const Chatroom = () => {\n  const { groups } = useMessageState()\n  const dispatch = useMessageDispatch()\n  const [content, setContent] = useState('')\n\n  const selectedGroup = groups?.find(group => group.selected === true)\n  // console.log('selected group : ', selectedGroup)\n  const messages = selectedGroup?.messages\n  // console.log('messages: ', messages)\n  const [getMessages, { loading: messagesLoading, data: messagesData }] = useLazyQuery(GET_MESSAGES)\n\n  const [sendMessage] = useMutation(SEND_MESSAGE, {\n    onError: (err) => console.log(err),  \n  })\n\n  useEffect(() => {\n    if (selectedGroup && !selectedGroup.messages) {\n      getMessages({ variables: { to: selectedGroup.groupname } })\n    }\n  }, [selectedGroup])\n\n  useEffect(() => {\n    if (messagesData) {\n      console.log('messages Data : ', messagesData)\n      dispatch({\n        type: 'SET_GROUP_MESSAGES', payload: {\n          groupname: selectedGroup.groupname,\n          messages: messagesData.getMessages\n      } })\n    }\n  },[messagesData])\n\n  const submitMessage = (e) => {\n    e.preventDefault()\n    if (content.trim() === '' || !selectedGroup) return\n    console.log('send message: ', content)\n    setContent('')\n    //mutation for sending a message\n    sendMessage({\n      variables: {\n        to: selectedGroup.groupname,\n        content\n    }})\n  }\n\n  let selectedChatMarkup\n  if (!messages && !messagesLoading) {\n    selectedChatMarkup = <p className=\"info-text\">Select a friend</p>\n  } else if (messagesLoading) {\n    selectedChatMarkup = <p className=\"info-text\">loading...</p>\n  } else if (messages.length > 0) {\n    selectedChatMarkup = messages.map((message, index) => (\n      <Fragment key={message.id}>\n        <Message message={message} />\n        {index === messages.length - 1 && (\n          <div className=\"invisible\">\n            <hr className=\"m-0\"/>\n          </div>\n        )}\n      </Fragment>\n    ))\n  } else if (messages.length === 0) {\n    selectedChatMarkup = <p className=\"info-text\">You are now connected! send your first message</p>\n  }\n\n  const home = () => {\n    window.location.href = '/'\n  }\n  return (\n    <Col xs={10} md={8} className=\"p-0\">\n      <div>\n        <Button variant=\"link\" className=\"btn-light text-decoration-none\"\n          onClick={home}>Back to home</Button>\n      </div>\n\n      <div className=\"messages-box d-flex flex-column-reverse mt-2 p-3\">\n        {selectedChatMarkup}\n      </div>\n      \n      <div className=\"px-3 py-2 mb-3 mt-2\">\n        <Form onSubmit={submitMessage}>\n          <Form.Group className=\"d-flex align-items-center m-0\">\n            <Form.Control type=\"text\" className=\"message-input rounded-pill bg-secondary p-3 border-0\"\n              placeholder=\"Type a message...\" value={content}\n              onChange={(e) => setContent(e.target.value)} />\n            <i className=\"fas fa-paper-plane fa-2x text-primary ms-2\"\n              role=\"button\"\n              onClick={submitMessage}></i>\n          </Form.Group>\n        </Form>\n      </div>\n    </Col>\n  )\n}"]},"metadata":{},"sourceType":"module"}