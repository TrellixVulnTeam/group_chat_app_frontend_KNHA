{"ast":null,"code":"var _jsxFileName = \"/Users/divyanshisaxena/Desktop/divyanshi/learning/gql/group-chat-app/client/src/pages/Message.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useAuthState } from '../context/auth';\nimport classNames from 'classnames';\nimport moment from 'moment';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap'; // import { gql, useMutation } from '@apollo/client'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Message({\n  message\n}) {\n  _s();\n\n  const {\n    user\n  } = useAuthState();\n  const sent = message.from === user.username;\n  const received = !sent; // const [showPopover, setShowPopover] = useState(false)\n  // const reactionIcons = [...new Set(message.reactions.map((r)=>r.content))] //for unique set\n  // const [reactToMessage] = useMutation(REACT_TO_MESSAGE, {\n  //   onError: (e) => console.log(e),\n  //   onCompleted: data => setShowPopover(false)\n  // })\n  // const react = (reaction) => {\n  //   // console.log(`Reacting ${reaction} to message ${message.uuid}`)\n  //   reactToMessage({\n  //     variables: {\n  //       uuid: message.uuid,\n  //       content: reaction\n  //   }})\n  // }\n  // const reactButton = (\n  //   <OverlayTrigger\n  //     trigger=\"click\"\n  //     placement=\"top\"\n  //     show={showPopover}\n  //     onToggle={setShowPopover}\n  //     transition={false}\n  //     rootClose\n  //     overlay={\n  //       <Popover className=\"rounded-pill\">\n  //         <Popover.Content className=\"d-flex px-0 py-1 align-items-center react-button-popover\">\n  //           {reactions.map(reaction => (\n  //             <Button\n  //               className=\"react-icon-button\"\n  //               variant=\"link\"\n  //               key={reaction}\n  //               onClick={() => react(reaction)}\n  //             >\n  //               {reaction}\n  //             </Button>\n  //           ))}\n  //         </Popover.Content>\n  //       </Popover>\n  //     }\n  //   >\n  //     <Button variant=\"link\" className=\"px-2\">\n  //       <i className=\"far fa-smile\"></i>\n  //     </Button>\n  //   </OverlayTrigger>\n  // )\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classNames('d-flex my-3', {\n      'ms-auto': sent,\n      'me-auto': received\n    }),\n    children: /*#__PURE__*/_jsxDEV(OverlayTrigger // placement={sent ? 'right' : 'left'}\n    , {\n      placement: 'top',\n      overlay: /*#__PURE__*/_jsxDEV(Tooltip, {\n        children: moment(message.createdAt).format('MMM DD, YYYY @ h:mm a')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this),\n      transition: false,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classNames('position-relative py-2 px-3 rounded-pill', {\n          'bg-primary': sent,\n          'bg-secondary': received\n        }),\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: classNames({\n            'text-white': sent\n          }),\n          children: message.content\n        }, message.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Message, \"U3GLZDc7n84D4xVwhRkhjCuO2dE=\", false, function () {\n  return [useAuthState];\n});\n\n_c = Message;\n\nvar _c;\n\n$RefreshReg$(_c, \"Message\");","map":{"version":3,"sources":["/Users/divyanshisaxena/Desktop/divyanshi/learning/gql/group-chat-app/client/src/pages/Message.js"],"names":["React","useState","useAuthState","classNames","moment","OverlayTrigger","Tooltip","Message","message","user","sent","from","username","received","createdAt","format","content","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,cAAT,EAAyBC,OAAzB,QAAwC,iBAAxC,C,CACA;;;AAEA,eAAe,SAASC,OAAT,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA8B;AAAA;;AAE3C,QAAM;AAACC,IAAAA;AAAD,MAASP,YAAY,EAA3B;AACA,QAAMQ,IAAI,GAAGF,OAAO,CAACG,IAAR,KAAiBF,IAAI,CAACG,QAAnC;AACA,QAAMC,QAAQ,GAAG,CAACH,IAAlB,CAJ2C,CAK3C;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,sBACE;AAAK,IAAA,SAAS,EAAEP,UAAU,CAAC,aAAD,EAAgB;AACxC,iBAAWO,IAD6B;AAExC,iBAAWG;AAF6B,KAAhB,CAA1B;AAAA,2BAKA,QAAC,cAAD,CACE;AADF;AAEE,MAAA,SAAS,EAAE,KAFb;AAGE,MAAA,OAAO,eACL,QAAC,OAAD;AAAA,kBACGT,MAAM,CAACI,OAAO,CAACM,SAAT,CAAN,CAA0BC,MAA1B,CAAiC,uBAAjC;AADH;AAAA;AAAA;AAAA;AAAA,cAJJ;AAQE,MAAA,UAAU,EAAE,KARd;AAAA,6BAUE;AAAK,QAAA,SAAS,EAAEZ,UAAU,CAAC,0CAAD,EAA6C;AACrE,wBAAcO,IADuD;AAErE,0BAAgBG;AAFqD,SAA7C,CAA1B;AAAA,+BASE;AAAG,UAAA,SAAS,EAAEV,UAAU,CAAC;AAAC,0BAAcO;AAAf,WAAD,CAAxB;AAAA,oBAAkEF,OAAO,CAACQ;AAA1E,WAAqDR,OAAO,CAACS,EAA7D;AAAA;AAAA;AAAA;AAAA;AATF;AAAA;AAAA;AAAA;AAAA;AAVF;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA,UADF;AAgCD;;GApFuBV,O;UAEPL,Y;;;KAFOK,O","sourcesContent":["import React, {useState} from 'react'\nimport { useAuthState } from '../context/auth'\nimport classNames from 'classnames'\nimport moment from 'moment'\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap'\n// import { gql, useMutation } from '@apollo/client'\n\nexport default function Message({ message }) {\n  \n  const {user} = useAuthState()\n  const sent = message.from === user.username\n  const received = !sent\n  // const [showPopover, setShowPopover] = useState(false)\n\n  // const reactionIcons = [...new Set(message.reactions.map((r)=>r.content))] //for unique set\n\n  // const [reactToMessage] = useMutation(REACT_TO_MESSAGE, {\n  //   onError: (e) => console.log(e),\n  //   onCompleted: data => setShowPopover(false)\n  // })\n\n  // const react = (reaction) => {\n  //   // console.log(`Reacting ${reaction} to message ${message.uuid}`)\n  //   reactToMessage({\n  //     variables: {\n  //       uuid: message.uuid,\n  //       content: reaction\n  //   }})\n  // }\n  // const reactButton = (\n  //   <OverlayTrigger\n  //     trigger=\"click\"\n  //     placement=\"top\"\n  //     show={showPopover}\n  //     onToggle={setShowPopover}\n  //     transition={false}\n  //     rootClose\n  //     overlay={\n  //       <Popover className=\"rounded-pill\">\n  //         <Popover.Content className=\"d-flex px-0 py-1 align-items-center react-button-popover\">\n  //           {reactions.map(reaction => (\n  //             <Button\n  //               className=\"react-icon-button\"\n  //               variant=\"link\"\n  //               key={reaction}\n  //               onClick={() => react(reaction)}\n  //             >\n  //               {reaction}\n  //             </Button>\n  //           ))}\n  //         </Popover.Content>\n  //       </Popover>\n  //     }\n  //   >\n  //     <Button variant=\"link\" className=\"px-2\">\n  //       <i className=\"far fa-smile\"></i>\n  //     </Button>\n  //   </OverlayTrigger>\n  // )\n  return (\n    <div className={classNames('d-flex my-3', {\n      'ms-auto': sent,\n      'me-auto': received\n    })}>\n    {/* {sent && reactButton} */}\n    <OverlayTrigger\n      // placement={sent ? 'right' : 'left'}\n      placement={'top'}\n      overlay={\n        <Tooltip>\n          {moment(message.createdAt).format('MMM DD, YYYY @ h:mm a')}\n        </Tooltip>\n      }\n      transition={false}>\n      \n      <div className={classNames('position-relative py-2 px-3 rounded-pill', {\n        'bg-primary': sent,\n        'bg-secondary': received\n      })}>\n          {/* {message.reactions.length > 0 && (\n            <div className=\"reactions-div bg-secondary p-1 rounded-pill\">\n              {reactionIcons} {message.reactions.length}\n            </div>\n        )} */}\n        <p className={classNames({'text-white': sent})} key={message.id}>{message.content}</p>\n      </div>\n\n      </OverlayTrigger>\n      {/* {received && reactButton} */}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}