{"ast":null,"code":"var _jsxFileName = \"/Users/divyanshisaxena/Desktop/divyanshi/learning/gql/group-chat-app/client/src/pages/Chatroom.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, Fragment, useState } from 'react';\nimport { Col, Form } from 'react-bootstrap';\nimport { gql, useLazyQuery } from '@apollo/client';\nimport { useMessageDispatch, useMessageState } from '../context/message';\nimport Message from './Message';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_MESSAGES = gql`\n  query getMessages($to: String!){\n    getMessages(to: $to){\n      content from to createdAt\n    }\n  }\n`;\nexport const Chatroom = () => {\n  _s();\n\n  const {\n    groups\n  } = useMessageState();\n  const dispatch = useMessageDispatch();\n  const [content, setContent] = useState('');\n  const selectedGroup = groups === null || groups === void 0 ? void 0 : groups.find(group => group.selected === true);\n  const messages = selectedGroup === null || selectedGroup === void 0 ? void 0 : selectedGroup.messages;\n  const [getMessages, {\n    loading: messagesLoading,\n    data: messagesData\n  }] = useLazyQuery(GET_MESSAGES);\n  useEffect(() => {\n    if (selectedGroup && !selectedGroup.messages) {\n      getMessages({\n        variables: {\n          to: selectedGroup.groupname\n        }\n      });\n    }\n  }, [selectedGroup]);\n\n  const submitMessage = e => {\n    e.preventDefault();\n    if (content.trim() === '' || !selectedGroup) return;\n    console.log('send message: ', content);\n    setContent(''); //mutation for sending a message\n    // sendMessage({\n    //   variables: {\n    //     to: selectedUser.username,\n    //     content\n    // }})\n  };\n\n  let selectedChatMarkup;\n\n  if (!messages && !messagesLoading) {\n    selectedChatMarkup = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"info-text\",\n      children: \"Select a friend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 26\n    }, this);\n  } else if (messagesLoading) {\n    selectedChatMarkup = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"info-text\",\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 26\n    }, this);\n  } else if (messages.length > 0) {\n    selectedChatMarkup = messages.map((message, index) => /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Message, {\n        message: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), index === messages.length - 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"invisible\",\n        children: /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"m-0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)]\n    }, message.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this));\n  } else if (messages.length === 0) {\n    selectedChatMarkup = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"info-text\",\n      children: \"You are now connected! send your first message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 26\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Col, {\n    xs: 10,\n    md: 8,\n    className: \"p-0\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-box d-flex flex-column-reverse mt-2 p-3\",\n      children: selectedChatMarkup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"px-3 py-2 mb-3 mt-2\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: submitMessage,\n        children: /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"d-flex align-items-center m-0\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            className: \"message-input rounded-pill bg-secondary p-3 border-0\",\n            placeholder: \"Type a message...\",\n            value: content,\n            onChange: e => setContent(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-paper-plane fa-2x text-primary ms-2\",\n            role: \"button\",\n            onClick: submitMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chatroom, \"7xBg4TvDyTLWJYD3zmcZNokEJng=\", false, function () {\n  return [useMessageState, useMessageDispatch, useLazyQuery];\n});\n\n_c = Chatroom;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chatroom\");","map":{"version":3,"sources":["/Users/divyanshisaxena/Desktop/divyanshi/learning/gql/group-chat-app/client/src/pages/Chatroom.js"],"names":["React","useEffect","Fragment","useState","Col","Form","gql","useLazyQuery","useMessageDispatch","useMessageState","Message","GET_MESSAGES","Chatroom","groups","dispatch","content","setContent","selectedGroup","find","group","selected","messages","getMessages","loading","messagesLoading","data","messagesData","variables","to","groupname","submitMessage","e","preventDefault","trim","console","log","selectedChatMarkup","length","map","message","index","id","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, Fragment, useState } from 'react'\nimport { Col, Form } from 'react-bootstrap'\nimport { gql, useLazyQuery } from '@apollo/client'\nimport { useMessageDispatch, useMessageState } from '../context/message'\nimport Message from './Message'\n\nconst GET_MESSAGES = gql`\n  query getMessages($to: String!){\n    getMessages(to: $to){\n      content from to createdAt\n    }\n  }\n`\n\nexport const Chatroom = () => {\n  const { groups } = useMessageState()\n  const dispatch = useMessageDispatch()\n  const [content, setContent] = useState('')\n\n  const selectedGroup = groups?.find(group => group.selected === true)\n  const messages = selectedGroup?.messages\n  const [getMessages, { loading: messagesLoading, data: messagesData }] = useLazyQuery(GET_MESSAGES)\n\n  useEffect(() => {\n    if (selectedGroup && !selectedGroup.messages) {\n      getMessages({ variables: { to: selectedGroup.groupname } })\n    }\n  }, [selectedGroup])\n\n  const submitMessage = (e) => {\n    e.preventDefault()\n    if (content.trim() === '' || !selectedGroup) return\n    console.log('send message: ', content)\n    setContent('')\n    //mutation for sending a message\n    // sendMessage({\n    //   variables: {\n    //     to: selectedUser.username,\n    //     content\n    // }})\n  }\n\n  let selectedChatMarkup\n  if (!messages && !messagesLoading) {\n    selectedChatMarkup = <p className=\"info-text\">Select a friend</p>\n  } else if (messagesLoading) {\n    selectedChatMarkup = <p className=\"info-text\">loading...</p>\n  } else if (messages.length > 0) {\n    selectedChatMarkup = messages.map((message, index) => (\n      <Fragment key={message.id}>\n        <Message message={message} />\n        {index === messages.length - 1 && (\n          <div className=\"invisible\">\n            <hr className=\"m-0\"/>\n          </div>\n        )}\n      </Fragment>\n    ))\n  } else if (messages.length === 0) {\n    selectedChatMarkup = <p className=\"info-text\">You are now connected! send your first message</p>\n  }\n\n  return (\n    <Col xs={10} md={8} className=\"p-0\">\n      <div className=\"messages-box d-flex flex-column-reverse mt-2 p-3\">\n        {selectedChatMarkup}\n      </div>\n      \n      <div className=\"px-3 py-2 mb-3 mt-2\">\n        <Form onSubmit={submitMessage}>\n          <Form.Group className=\"d-flex align-items-center m-0\">\n            <Form.Control type=\"text\" className=\"message-input rounded-pill bg-secondary p-3 border-0\"\n              placeholder=\"Type a message...\" value={content}\n              onChange={(e) => setContent(e.target.value)} />\n            <i className=\"fas fa-paper-plane fa-2x text-primary ms-2\"\n              role=\"button\"\n              onClick={submitMessage}></i>\n          </Form.Group>\n        </Form>\n      </div>\n    </Col>\n  )\n}"]},"metadata":{},"sourceType":"module"}